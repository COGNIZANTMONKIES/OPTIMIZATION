##############################################################################
##############################################################################
####       
####    *** *** *** *** *** *** ***  *  *** *** *** * *
####    * * ***  *   *  ***  *   *   *   *   *  * * ***
####    *** *    *  *** * * *** *** * *  *  *** *** * *
####    
####    ooo ppp TTT III AAA III ZZZ  A  TTT ZZZ ooo N N
####    o o ppp  T   I  AAA  I   Z   A   T   Z  o o NNN
####    ooo p    T  III A A III ZZZ A A  T  ZZZ ooo N N
####    
##############################################################################
##############################################################################


##############################################################################
###		Introduction
##############################################################################

Why Practice Optimization?

* lowers electric bills
* lowers hardware bill
* lowers latency
* reduces staff
* near-instant loadtime
* near-instant runtime
* great user experience
* overall thinking improves
* higher salary

Origins of Optimization

  Where there are limitations, optimization follows behind.
  Optimizations timelime stretches as far as the first human artifact.
  Fabricating tools from sticks, rocks, vegetation, and all the Earths 
  provided surroundings. Building these tools drained our energy, 
  cut our hands, dehydrated us, sometimes broke bones. To obtain the resources,
  bipedals we are, travelled barefoot far and wide, scavenging for resources.
  Farming and colonies popped into existence. A new and constant problem 
  arose from those activities. REPLICATION. Duplicating things becomes time 
  consuming. Since we converted from nomads to domesticants, our survival 
  dependency transitioned from hunting to replication of food, tools, shelter, etc.
  Resources are limited. Shelter spares the body from the elements ruthless erosion.
  Shelter for everyone required us to think ahead and be clever with what we have.
  Molding materials like bricks with holes in the center to conserve supply and lighten
  the load kills two birds one stone. Dedicating portions of trees to cut for certain areas
  of buildings saved us from extra chopping, cutting, and relocation.
  
  Printing is by far one of the most impactful optimizations mankind produced. Rethink the meaning of
  printing as anything that replicates. Printing can be thought of as manufacturing vehicles or even 
  the assembly line to create wooden pencils. They start from resources then convert into a final product.
  A wikipedia article claims early recognition of printing was around 200AD from China. The method was called 
  Woodblock Printing which easily allowed duplications for printing text, images or patterns to materials.
  Woodblock priting was used for clothing, art, books, etc. Inventions like the typewriter sped up 
  text printing and eliminated illegible handwriting. Producing books using tools versus handwritten
  granted the population a low cost affordable priveledge to solved knowledge mitigating rediscoveries.
  
  Jumping to the industrial age. One of the most important optimizations mankind
  invented were machines. Machines applied to farming accelerated crop productions.
  An abundance of food and minimal set of required harvesting hands freed us from 
  living off the land as a way of life. With free pairs of available, we moved
  onto new inventions inspired by machines. An electrical powered computer
  was conceived. Calculations crunched at mouth dropping speeds. A new set of
  free hands/minds available again. Computers then versus now were terribly slow.
  About a million times slower. Our ambitions demanded faster hardware and faster software.
  It's 2020, were in the era of Artificial Intelligence. Computer are millions of times faster
  than it's conception. Even with all this speed, AI calculations take weeks, months, and sometimes years.
  Hardware optimizations are reaching there limitations. Software optimizations were ignored because
  of the high cost of an engineer and the cheapness of purchasing faster hardware. 
  The impact of fast hardware is nothing compared to optimized software. This book will teach
  you the practice of thinking differently because optimization demands new perception
  to solve problems.
  
Financial Savings of Software Optimization  

  Imagine a supercomputer computes for 3 months. The total electricity bill is 3 million dollars.
  The engineering staff cost is 3 million dollars. A total of 6 million dollars.
  Now imagine you tweaked a few bottlenecked algorithms. The supercomputer runs the next round of calculations
  and takes 1 month. You now saved 4 million dollars. What do you think your salary cut should be?
  I once wrote an algorithm to identify prime numbers. For numbers in the billions, the baselevel algorithm
  figured out the problem in 16 seconds. My approach was very different. I reduced the search space to 
  a tiny sliver on the pi chart. The optimized algorithm could conclude numbers in the billions prime or not in about
  .3 seconds excluding even numbers because evens were the first check. Thats 1.8 % the time required to compute.
  The size of the inputs rarely effected time required. Another technique used to eliminate the search space was
  knowing what factors multiplied ended with a certain number. So my dividing by n loops were strategized.
  Read a story about a programmer who spent two weeks tweaking a programs performance. They were
  
Intentional Focus

  In order to comprehend this book, readers must be competent algorithm writers and a fluent 
  understanding in a programming languages. In my eyes, there are 10 stepping stone fundamentals 
  to software optimization. Our main focus is the most important fundamental as it's in your 
  control and has the largest performance impact. Logical approach. Compilers have there own optimizations 
  but never modify the "a-z steps" to solve a problem. At most the compiler substitutes computer operations 
  with faster operations. Practioners will only learn by conjuring there own solutions. Currently, 
  the only algorithm to optimize algorithms is exposing programmers to contrastable samples hoping 
  there brains formulate new patterns. Otherwise, it would be pointless to preach optimization as 
  automating optimization is a computational nightmare considering the endless constraints.

