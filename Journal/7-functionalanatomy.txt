******************************************************************
******************************************************************
      Functional Anatomy
******************************************************************
******************************************************************
* anatomy point of views
* optimizing validations in loops
* eliminating redundant validations
******************************************************************


* anatomy point of views

  Normal Presented Anatomy
    
    function <name> (<params>) { 
      <code> 
    }
    
  The Real Anatomy (Hackers Point of View)
  
    function <name> (<params>) {
      <validations>
      <block>
    }
  
  Notice <code> replaced with <validations> and <block>.
  
  <validations> assert input data is non malicious, within ranges,
  and are appropriate datatypes.
  
  <block> is the functions intended code to execute.
  
* optimizing validation loops

    The problem with the functional anatomy is the sequential ordering.
    Singular inputs like numbers and booleans are fine to use the functional anatomy.
    Tho plural datatypes like strings, objects, and arrays need an adjustment to that model.

    The function arrToStr below is a prime example of the innefficiencies posed when
    validating input data. The algorithms weakness is that it loops over the array
    twice. First loop asserts datatype. Second loop concatenates. Another weakness of
    arrToStr is the memory usage. An existing array followed by a matching string
    is no bueno unless for any reason the program required it. Only one benefit from
    this approach no memory writes waisted if any invalid inputs.
  
    function arrToStr(arr) {
     
      // validation
      
      Array.isArray(arr)                               || (()=>{throw new Error()})() 
      arr.every((e=>{ return typeof e === "string" })) || (()=>{throw new Error()})()
      
      // block
      
      let str = "";
      arr.forEach((e)=>{ str += e });

      return str;
    }
     
    Function arrToStr_optimized uses little CPU and Memory. It traverses the
    array input one time while deleting the indexed value but transfers the
    value to a str. This function is safe from falsy values in the array.
    Notice that the repeated code block was compensated by the loops
    limiter position. We can call this approach "on the fly validations"
    to avoid looping twice and write to memory as you go. After all, it
    takes a split second to delete used spaces.
     
    function arrToStr_optimized(arr) {
      
      // validation
      
      Array.isArray(arr)                               || (()=>{throw new Error('not array')})() 
      
      // block
      let len = arr.length; // the initial length of arr
      let i;                // iterator
      let str = "";         // array converted string
      let s = "";
      for (
            i = len+1; 
            (i--) && (typeof (s = arr.shift()) === "string"); 
            str += s
      ) // codeBlocked ignored and represented in loops placeholders
      
      if (i ^ 0) throw new Error('i not eq 0'); 
      
      return str
    }
    
    Summing an array with unknown datatypes inputs and unsorted values.
    Again, this approach is inneficient as it loops the array twice.
    JavaScript developers have been known to rely on hardware speed.
    That is bad practice. It's one thing for json lists to contain
    10 or less indexes in there lists. It's another problem when
    the returned database queries are 100s to 1000s to 10000s and beyond.
    
    function sumArr(arr) {
      
      // validations
      
      Array.isArray(arr) || (()=>{throw new Error()})();
      arr.every((e)=>{ return typeof e === "number" });
      
      // block
      
      let sum = 0;
      
      arr.forEach((e)=>{ sum += e; });
      
      return sum;
    }
    
    Below function sumArr_optimized is concious of ensuring
    the indexed values are numbers. Not only does it assert
    proper inputs, it kills two birds with one stone because
    accessing an arrays values requires the iteration number
    to be an integer of 0 -> array index limit. Thats why the
    if statement checks for i > -1 to ensure no loop was terminated
    early from an improper datatype.
    
    function sumArr_optimized(arr) {
    
      // validations
      
      Array.isArray(arr) || (()=>{throw new Error()})();
      
      // block
      
      let sum = 0;
      let i;
      for (
            i = arr.length-1; 
            typeof arr[i] === "number"; 
            sum+=arr[i--]
      ) ;
      
      (i > -1) && (()=>{throw new Error()})()
      
      return sum;
    }
    
    
    
    
* eliminating redundant validations

  Aiding in debugging and securing code has cluttered codebases
  with unwanted and unnoticed data input assertions. The main intention
  of writing functions is to be independent from other code. Yet these functions
  are unaware of it's implemented positons. In other words, code is written statically
  and needs to be dynamic. How you might ask to code dynamically? 
  First a universal componentized functional anatomy agreement must union. 
  The componentized anatomy point of view I propose has worked in my recent projects.
  It's an eye opener to the code patterns presented everywhere in programming. These concepts are nothing
  new but scavenged into a unified model to give clarity about programming functions.
  Remember, just like science, complex things are made of simple things and once understood,
  complexity becomes simple. A large codebase is nothing more than derived simple functions that work 
  sequentially or unsequentially. A codebase should be viewed as a large function or even with 
  when in high states of clarity a small esoteric writtenly procedure equivalent to that large function.
  For example, chemistry was a mystical art until worldwide collaborative efforts realized 
  the periodic table modeled behaviors. Understanding the concept of atoms aligned with the periodic table drove
  that field in new prosperous directions.
  
  Abstract Model
  
  const dynamicFunctionAnatomy = Object.freeze(Object.assign(
      function() {
            dynamicFunctionAnatomy.defaults(arguments);
            dynamicFunctionAnatomy.validate(arguments);
            dynamicFunctionAnatomy.block   (arguments);
      },
      {
            defaults: function(){},
            validate: function(){},
            block   : function(){}
      }
  ));
  
  The anonymous function calls the 3 segmented anatomized functions.
  These distinguishements allow individual and whole usage of the
  functions disceted capabilities. Below are ways to use the sliced individuals.
  
  
  let dfa = dynamicFunctionAnatomy;
  
  dfa.defaults(/*arguments here*/);
  dfa.validate(/*arguments here*/);
  dfa.block   (/*arguments here*/);
  
  // or as whole which the normal way of invoking functions.
  
  dfa(/*arguments here*/)
  
  Concrete example
  
     Here we have a normally written function.
     
     function printSomething(str) {
            
            if (str === undefined) {
                  str = "hello";
            } else {
                  typeof str === "string" || (()=>{throw new Error()})();            
                  str.length === 0 && str = "hello"
            }
            
            console.log(str);
     }
     
     And here we have adopted the dynamicFunctionAnatomy model.
     
     const printSomething = Object.freeze(Object.assign(
            function() {
                  printSomething.defaults(arguments);
                  printSomething.validate(arguments);
                  printSomething.block   (arguments);
            },
            {
                  defaults: function(){
                        if (arguments[0] === undefined) {
                              arguments[0] = "hello";
                        }
                  },
                  validate: function(){
                        if (arguments[0]) {
                             typeof arguments[0] === "string" || (()=>{throw new Error()})();            
                             arguments[0].length === 0 && arguments[0] = "hello"
                        }
                  },
                  block   : function(){
                        console.log(arguments[0]);
                  }
            }
     ));
     
     let arg = "goodbye";
     printSomething(arg); // logs "hello";
     
     arg = "";
     
     printSomething.defaults(arg); // modifies arg variable to "hello"
     printSomething.validate(arg); // asserts arg variable is datatype string
     printSomething.block.  (arg); // logs "hello" to the console.
     
     
     Some would say that the simple example is overkill. Don't let that distract you.
     We are only using a simple straightforward example to understand the model.
  
     Lets move on to the big picture. Combining many of the functions together.
     
     const a = Object.freeze(Object.assign(
      function(){
            a.default (arguments);
            a.validate(arguments);
            a.block   (arguments);
      },
      {
            default:  function(){},
            validate: function(){},
            block:    function(){}
      })
     );
     const b = Object.freeze(Object.assign(
      function(){
            b.default (arguments);
            b.validate(arguments);
            b.block   (arguments);
      },
      {
            default:  function(){},
            validate: function(){},
            block:    function(){}
      })
     );
     const c = Object.freeze(Object.assign(
      function(){
            c.default (arguments);
            c.validate(arguments);
            c.block   (arguments);
      },
      {
            default:  function(){},
            validate: function(){},
            block:    function(){}
      })
     );
     const d = Object.freeze(Object.assign(
      function(){
            d.default (arguments);
            d.validate(arguments);
            d.block   (arguments);
      },
      {
            default:  function(){},
            validate: function(){},
            block:    function(){}
      })
     );
     
     
     Here we have a traditional usage of functions that execute independently.
     
     function main_0(){
       a();
       b();
       c();
       d();
     }
     
     
     Here we have segmented code into two sections. Validations and block executions.
     
     function main_1(){
      a.validate();
      b.validate();
      c.validate();
      d.validate();
      a.block();
      b.block();
      c.block();
      d.block();
     }
     
     Function main_1 unlike main_0 is more concerned about ensuring all input variables are sanitized
     before executing block manipulations. Imagine this style of programming on a server.
     You wouldn't need to write throw away code crafted only for the server because the functions
     are segmentable.
     
     Below is a scenario where redundant validations are eliminated.
     
     
     function a_block   () {} // performs string manipulation
     function a_validate() {} // only checks for string datatype
     function b_block   () {} // performs string manipulation
     function b_validate() {} // only checks for string datatype
     function c_block   () {} // performs string manipulation
     function c_validate() {} // only checks for string datatype
     function d_block   () {} // performs string manipulation
     function d_validate() {} // only checks for string datatype
     
     function main() {
            a_validate();
            a_block   ();
            b_block   ();
            c_block   ();
            d_block   ();
     }
     
     Notice in function main there are not 8 function calls rather only 5.
     As far as the math goes. Instructions/operations are not equal execution
     times, but the clutter amount of instructions needed is
     
     validations <= blocks
     validations + blocks <= maxInstructions
     
     (blocks - shared validations) <= blocks
     
     
     
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
  


